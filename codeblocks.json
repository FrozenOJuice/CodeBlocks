[
  {
    "id": 2,
    "title": "FastAPI Backend Structure",
    "category": "Files",
    "code": "backend/\n    app/\n        __init__.py\n        main.py\n    authentication/\n        __init__.py\n        models.py\n        router.py\n        schemas.py\n        security.py\n        utils.py\n    data/\n        users.json\n        movies.json",
    "explanation": "The general file structure for a FastAPI backend",
    "lineExplanations": {}
  },
  {
    "id": 3,
    "title": "General main.py",
    "category": "FastAPI Backend",
    "code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom backend.authentication import router as authentication_router\n\napp = FastAPI()\n\napp.include_router(authentication_router.router, prefix=\"/auth\", tags=[\"auth\"])\n\napp.add_middleware(\n  CORSMiddleware,\n  allow_origins=[\"http://localhost:3000\"],  # Next.js dev server\n  allow_credentials=True,\n  allow_methods=[\"*\"],\n  allow_headers=[\"*\"],\n)\n\n@app.get(\"/\")\nasync def read_root():\n  return {\"message\": \"root route!!\"}\n\n@app.get(\"/ping\")\nasync def ping():\n  return {\"message\": \"pong\"}",
    "explanation": "This code sets up a FastAPI backend server designed to work with a Next.js frontend, featuring authentication routes mounted under the \"/auth\" prefix and basic API endpoints for root access and health checks. The application is configured with CORS middleware to securely allow cross-origin requests from the frontend development server, enabling seamless communication between the separate frontend and backend services during development. The structure provides a clean foundation for building a full-stack application with organized routing and proper cross-origin request handling.",
    "lineExplanations": {
      "1": "Imports the main FastAPI class and HTTPException for error handling",
      "2": "Imports CORS middleware to handle cross-origin requests",
      "3": "Imports authentication router from backend module",
      "4": "Blank Line",
      "5": "Creates the main FastAPI application instance",
      "6": "Blank Line",
      "7": "Includes authentication routes with \"/auth\" prefix and groups them under \"auth\" tags",
      "8": "Blank Line",
      "9": "Adds middleware to the application",
      "10": "Specifies CORS middleware type",
      "11": "Allows requests from Next.js development server running on port 3000",
      "12": "Enables cookies and authentication headers to be included in requests",
      "13": "Permits all HTTP methods (GET, POST, PUT, DELETE, etc.)",
      "14": "Allows all types of HTTP headers in requests",
      "15": "Closes the middleware configuration block",
      "16": "Blank Line",
      "17": "Decorator that defines a GET endpoint for the root path",
      "18": "Defines an asynchronous function to handle requests to the root endpoint",
      "19": "Returns a JSON response with a welcome message",
      "20": "Blank Line",
      "21": "Decorator that defines a GET endpoint for the \"/ping\" path",
      "22": "Defines an asynchronous function for the health check endpoint",
      "23": "Returns a JSON response with \"pong\" message"
    }
  },
  {
    "id": 4,
    "title": "Authentication models.py",
    "category": "FastAPI Backend",
    "code": "from pydantic import BaseModel\nfrom typing import Optional\nfrom backend.authentication.schemas import UserRole\n\nclass User(BaseModel):\n    id: int\n    username: str\n    email: str\n    hashed_password: str\n    role: UserRole\n    \n    class Config:\n        from_attributes = True",
    "explanation": "This code defines a Pydantic model for representing user data in the application, specifying required fields for user identification, authentication credentials, and role-based access control. The model includes essential user attributes such as ID, username, email, securely hashed password, and role assignment, while the configuration enables compatibility with ORM objects by allowing instantiation from attribute-based data sources like database models. This structure ensures type-safe data handling and validation for user-related operations throughout the application.",
    "lineExplanations": {
      "1": "Imports BaseModel from pydantic for data validation and settings management",
      "2": "Imports Optional from typing for defining optional fields",
      "3": "Imports UserRole enum from the authentication schemas module",
      "4": "Blank Line",
      "5": "Defines a User class that inherits from Pydantic's BaseModel",
      "6": "Defines an integer field for user ID",
      "7": "Defines a string field for username",
      "8": "Defines a string field for email address",
      "9": "Defines a string field for storing the hashed password",
      "10": "Defines a role field using the imported UserRole enum type",
      "11": "Blank Line",
      "12": "Defines a nested Config class for model configuration",
      "13": "Enables ORM mode (formerly called from_attributes) to allow creating models from arbitrary class instances"
    }
  },
  {
    "id": 5,
    "title": "Utility - def user_exists()",
    "category": "FastAPI Backend",
    "code": "from typing import List, Dict, Any, Optional\n\ndef user_exists(users: List[Dict[str, Any]], username: str, email: str) -> tuple[bool, Optional[str]]:\n    username_taken = any(user[\"username\"] == username for user in users)\n    email_taken = any(user[\"email\"] == email for user in users)\n    \n    if username_taken and email_taken:\n        return True, \"Username and email already taken\"\n    elif username_taken:\n        return True, \"Username already taken\"\n    elif email_taken:\n        return True, \"Email already registered\"\n    \n    return False, None",
    "explanation": "This utility function provides comprehensive duplicate checking for user registration by verifying whether a given username or email already exists in a list of users. It returns detailed feedback about which specific field conflicts exist, allowing callers to provide precise error messages to users. The function efficiently handles all possible duplication scenarios - username only, email only, or both - and uses type hints for clear interface definition and better code maintainability.",
    "lineExplanations": {
      "1": "Import statement bringing in List, Dict, Any, and Optional type hints from the typing module",
      "2": "Blank line",
      "3": "Function definition that takes a list of user dictionaries, username string, and email string as parameters, returning a tuple with boolean and optional string",
      "4": "Checks if any user in the list has the specified username by iterating through all users",
      "5": "Checks if any user in the list has the specified email by iterating through all users",
      "6": "Blank line",
      "7": "Conditional check if both username and email are already taken",
      "8": "Returns a tuple with True and a message indicating both username and email are taken",
      "9": "Conditional check if only the username is already taken",
      "10": "Returns a tuple with True and a message indicating the username is taken",
      "11": "Conditional check if only the email is already registered",
      "12": "Returns a tuple with True and a message indicating the email is registered",
      "13": "Blank line",
      "14": "Returns a tuple with False and None if no duplicates are found"
    }
  },
  {
    "id": 6,
    "title": "Authentication schemas.py",
    "category": "FastAPI Backend",
    "code": "from typing import Optional, List\nfrom pydantic import BaseModel, EmailStr, validator\nfrom enum import Enum\n\nclass UserRole(str, Enum):\n    USER = \"user\"\n    MODERATOR = \"moderator\"\n    ADMIN = \"admin\"\n\nclass UserBase(BaseModel):\n    username: str\n    email: EmailStr\n\nclass UserCreate(UserBase):\n    password: str\n    role: UserRole = UserRole.USER  # Default role\n    \n    @validator('password')\n    def validate_password_strength(cls, v):\n        if len(v) < 8:\n            raise ValueError('Password must be at least 8 characters')\n        return v\n\nclass UserLogin(BaseModel):\n    username: str\n    password: str\n\nclass UserResponse(UserBase):\n    role: UserRole\n    \n    class Config:\n        from_attributes = True\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str = \"bearer\"\n    role: UserRole  # Add role to token response\n\nclass UserUpdate(BaseModel):\n    role: Optional[UserRole] = None\n    email: Optional[EmailStr] = None",
    "explanation": "This code defines a comprehensive set of Pydantic models for user management and authentication in a FastAPI application, including role-based access control with three distinct user roles (USER, MODERATOR, ADMIN). The models handle user creation with password strength validation, user responses with ORM compatibility, login credentials, JWT token responses including role information, and user profile updates with optional fields. The schema hierarchy promotes code reuse through inheritance while ensuring data validation and type safety throughout the authentication system.",
    "lineExplanations": {
      "1": "Import statement bringing in Optional and List type hints from typing module",
      "2": "Import statement for BaseModel, EmailStr validator, and validator decorator from pydantic",
      "3": "Import statement for Enum class",
      "4": "Blank line",
      "5": "Defines a UserRole class that inherits from both string and Enum",
      "6": "Defines USER enum member with string value \"user\"",
      "7": "Defines MODERATOR enum member with string value \"moderator\"",
      "8": "Defines ADMIN enum member with string value \"admin\"",
      "9": "Blank line",
      "10": "Defines UserBase class that inherits from BaseModel",
      "11": "Defines username field as string type",
      "12": "Defines email field with EmailStr type for email validation",
      "13": "Blank line",
      "14": "Defines UserCreate class that inherits from UserBase",
      "15": "Defines password field as string type",
      "16": "Defines role field with UserRole type and sets default value to UserRole.USER",
      "17": "Blank line",
      "18": "Decorator that marks the following method as a validator for the password field",
      "19": "Defines password validation method that takes class and value parameters",
      "20": "Checks if password length is less than 8 characters",
      "21": "Raises ValueError if password is too short",
      "22": "Returns the validated password value",
      "23": "Blank line",
      "24": "Defines UserLogin class that inherits from BaseModel",
      "25": "Defines username field as string type",
      "26": "Defines password field as string type",
      "27": "Blank line",
      "28": "Defines UserResponse class that inherits from UserBase",
      "29": "Defines role field with UserRole type",
      "30": "Blank line",
      "31": "Defines nested Config class for model configuration",
      "32": "Enables ORM mode to allow creating models from arbitrary class instances",
      "33": "Blank line",
      "34": "Defines Token class that inherits from BaseModel",
      "35": "Defines access_token field as string type",
      "36": "Defines token_type field as string with default value \"bearer\"",
      "37": "Defines role field with UserRole type for including role in token response",
      "38": "Blank line",
      "39": "Defines UserUpdate class that inherits from BaseModel",
      "40": "Defines optional role field that can be None",
      "41": "Defines optional email field that can be None"
    }
  }
]